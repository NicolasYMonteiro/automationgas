// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(ATENDENTE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  sales    Sale[]
  expenses Expense[]
  vehicles Vehicle[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ATENDENTE
  ADMINISTRATIVO
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  minStock    Int      @default(5)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sales       Sale[]
  inventory   Inventory[]
}

model Sale {
  id          String   @id @default(cuid())
  quantity    Int
  totalPrice  Decimal  @db.Decimal(10, 2)
  paymentType PaymentType
  status      SaleStatus @default(COMPLETED)
  notes       String?
  saleDate    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId    String
  user      User @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  customerId String?
  customer  Customer? @relation(fields: [customerId], references: [id])
}

enum PaymentType {
  DINHEIRO
  CARTAO
  PIX
  FIADO
}

enum SaleStatus {
  COMPLETED
  PENDING
  CANCELLED
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  phone       String?
  address     String?
  creditLimit Decimal? @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sales     Sale[]
  creditPayments CreditPayment[]
}

model CreditPayment {
  id         String   @id @default(cuid())
  amount     Decimal  @db.Decimal(10, 2)
  paymentDate DateTime @default(now())
  notes      String?
  createdAt  DateTime @default(now())

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Expense {
  id          String      @id @default(cuid())
  description String
  amount      Decimal     @db.Decimal(10, 2)
  category    ExpenseCategory
  expenseDate DateTime    @default(now())
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId String?
  user   User? @relation(fields: [userId], references: [id])
  vehicleId String?
  vehicle Vehicle? @relation(fields: [vehicleId], references: [id])
}

enum ExpenseCategory {
  COMBUSTIVEL
  MANUTENCAO
  ALIMENTACAO
  OUTROS
}

model Vehicle {
  id          String   @id @default(cuid())
  name        String
  plate       String   @unique
  model       String?
  year        Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String?
  user   User? @relation(fields: [userId], references: [id])
  expenses Expense[]
}

model Inventory {
  id          String   @id @default(cuid())
  quantity    Int
  type        InventoryType
  notes       String?
  createdAt   DateTime @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

enum InventoryType {
  ENTRADA
  SAIDA
  AJUSTE
}
